import React from "react";
import { SolaceTextFieldChangeEvent } from "./SolaceTextField";
export declare enum valueInputTypes {
    textfield = "textfield",
    select = "select",
    autocomplete = "autocomplete"
}
export interface SolaceAttributeValuePairProps {
    /**
     * unique id for each Attribute Value Pair (AVP) item
     */
    id: string;
    /**
     * index for each Attribute Value Pair (AVP) item in the list, used to updated the list in response to delete and onchange events
     */
    index: number;
    /**
     * key for Attribute Value Pair (AVP)
     */
    avpKey: string;
    /**
     * value for Attribute Value Pair (AVP)
     */
    avpValue: string;
    /**
     *
     */
    dataTags: string;
    /**
     * TODO: implementation required
     * specifies the type of the value providing component: types can be input, select etc. component, default to SolaceTextField if no type provided
     */
    type?: valueInputTypes;
    /**
     * specifies whether the Attribute Value Pair (AVP) component is rendered in ghost state
     */
    ghostItem: boolean;
    /**
     * callback for delete action
     */
    onDelete: (event: React.MouseEvent<HTMLElement>, index: number) => void;
    /**
     * callback for input onchange event
     */
    onChange: (event: SolaceTextFieldChangeEvent, index: number) => void;
    /**
     * callback for keyup event
     */
    onKeyUp: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    /**
     * callback for onblur event
     */
    onBlur: (event: React.FocusEvent<HTMLInputElement>, index: number) => void;
    /**
     * validation error on an AVP value input value
     */
    keyErrorText?: string;
    /**
     * validation error on an AVP value input value
     */
    valueErrorText?: string;
    /**
     * An optional string to be displayed when an AVP key or value is empty when set to read-only.
     */
    emptyFieldDisplayValue?: string;
    /**
     * index of the element that is being dragged over with
     * the index is updated on dragging
     */
    dropOverIndex: number | null;
    /**
     * dropping over state with three possible values:
     * true: dropping from top to bottom
     * false: dropping from bottom to top
     * null: dropping back to the same position or outside of the droppable container
     */
    dropFromTop: boolean | null;
    /**
     * read only flag
     */
    readOnly?: boolean;
}
export declare const SolaceAttributeValuePair: ({ id, index, avpKey, avpValue, dataTags, ghostItem, onDelete, onChange, onKeyUp, onBlur, keyErrorText, valueErrorText, dropOverIndex, dropFromTop, readOnly, emptyFieldDisplayValue }: SolaceAttributeValuePairProps) => JSX.Element;
