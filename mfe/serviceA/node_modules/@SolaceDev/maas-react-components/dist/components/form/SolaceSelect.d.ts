import { ReactNode } from "react";
import SolaceComponentProps from "../SolaceComponentProps";
export interface SolaceSelectChangeEvent {
    name: string;
    value: string;
}
export interface SolaceSelectProps extends SolaceComponentProps {
    /**
     * Unique identifier ... if `id` is not specified, `name` value will be used in order to make `label` and `helperText` accessible for screen readers
     */
    id?: string;
    /**
     * Name attribute to assign to the `input` element
     */
    name: string;
    /**
     * the label content to display on the screen
     */
    label?: string | JSX.Element;
    /**
     * The value of the `input` element, required for controlled component
     */
    value?: string;
    /**
     * Content to display as supportive/explanitory text
     */
    helperText?: string | JSX.Element;
    /**
     * The text to display as the tooltip hint
     */
    title?: string;
    /**
     * Boolean flag to mark the `input` in error state
     */
    hasErrors?: boolean;
    /**
     * Boolean flag used to display an indicator of whether or not this `input` is mandatory
     */
    required?: boolean;
    /**
     * Boolean flag to control whether to stack the label on top of the `input` element (false) or place them inline to one another (true)
     */
    inlineLabel?: boolean;
    /**
     * Boolean flag to disable the `input`
     */
    disabled?: boolean;
    /**
     * Boolean flag to set the `input` in a read-only state
     */
    readOnly?: boolean;
    /**
     * Callback function to trigger whenever the value of the `input` is changed
     */
    onChange?: (event: SolaceSelectChangeEvent) => void;
    /**
     * Callback function to return option display value based on selected option value
     */
    getOptionDisplayValue?: (value: unknown) => ReactNode;
    /**
     * An array of MenuItems to render as the select options
     */
    children: Array<JSX.Element>;
    /**
     * Custom Width of the component.
     */
    width?: string;
    /**
     * Custom maxHeight of the component.
     */
    maxHeight?: string;
    /**
     * Boolean flag to show the select option that has empty value
     */
    displayEmpty?: boolean;
    /**
     * Boolean flag to show the select options
     */
    open?: boolean;
    /**
     * Callback function to trigger whenever the dropdown opens
     */
    onOpen?: () => void;
    /**
     * Callback function to trigger whenever the dropdown closes
     */
    onClose?: () => void;
}
declare function SolaceSelect({ id, name, label, value, helperText, title, hasErrors, required, disabled, readOnly, inlineLabel, displayEmpty, onChange, getOptionDisplayValue, dataQa, dataTags, children, width, maxHeight, open, onOpen, onClose }: SolaceSelectProps): JSX.Element;
export default SolaceSelect;
