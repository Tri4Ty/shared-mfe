import React from "react";
import { SELECTION_TYPE, TableRow, TableColumn } from "../table-utils";
export interface ExpandableTableRowProps {
    enabled: boolean;
    rows: TableRow[];
    displayedColumns?: TableColumn[];
    internalDisplayedColumns?: TableColumn[];
    selectionType: SELECTION_TYPE;
    selectedRowIds: string[];
    handleRowClick: (row: TableRow) => void;
    independentRowHighlight: boolean;
    highlightedRowId?: string | null;
    addCheckBoxToRows: (row: TableRow) => React.ReactNode;
    renderConfiguredRowCells: (row: TableRow, displayedColumns: TableColumn[] | undefined, internalDisplayedColumns: TableColumn[] | undefined) => React.ReactNode[];
    hasRowActionItems: boolean;
    renderRowActionItems: (row: TableRow) => React.ReactNode[];
    rowHoverCallback?: (row: TableRow) => void;
    hasColumnHiding?: boolean;
    displayedColumnsChangedCallback?: (displayedColumns: TableColumn[]) => void;
    allowToggle?: boolean;
    selectRowWhenClickOnChildren?: boolean;
    renderChildren?: (row: TableRow) => React.ReactNode;
    expandedRowIds?: string[];
    setExpandedRowIds?: (rowIds: string[]) => void;
}
export declare const useExpandableRows: ({ enabled, rows, displayedColumns, internalDisplayedColumns, selectionType, selectedRowIds, handleRowClick, independentRowHighlight, highlightedRowId, addCheckBoxToRows, renderConfiguredRowCells, hasRowActionItems, renderRowActionItems, rowHoverCallback, hasColumnHiding, displayedColumnsChangedCallback, allowToggle, selectRowWhenClickOnChildren, renderChildren, expandedRowIds, setExpandedRowIds }: ExpandableTableRowProps) => {
    createRowNodes: () => React.ReactNode[];
};
