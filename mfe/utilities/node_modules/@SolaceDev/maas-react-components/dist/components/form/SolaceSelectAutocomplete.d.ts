import React from "react";
import SolaceComponentProps from "../SolaceComponentProps";
export interface SolaceSelectAutoCompleteProps<T, V> extends SolaceComponentProps {
    /**
     * Unique identifier ... if `id` is not specified, `name` value will be used in order to make `label` and `helperText` accessible for screen readers
     */
    id?: string;
    /**
     * Name attribute to assign to the `input` element
     */
    name: string;
    /**
     * the label content to display on the screen
     */
    label?: string | JSX.Element;
    /**
     * The value of the autocomplete
     */
    value?: V | V[];
    /**
     * Content to display as supportive/explanatory text
     */
    helperText?: string | JSX.Element;
    /**
     * The text to display as the tooltip hint
     */
    title?: string;
    /**
     * The text to display as the input placeholder
     */
    placeholder?: string;
    /**
     * Boolean flag to mark the `input` in error state
     */
    hasErrors?: boolean;
    /**
     * Boolean flag used to display an indicator of whether or not this `input` is mandatory
     */
    required?: boolean;
    /**
     * Boolean flag to control whether to stack the label on top of the `input` element (false) or place them inline to one another (true)
     */
    inlineLabel?: boolean;
    /**
     * Boolean flag to disable the `input`
     */
    disabled?: boolean;
    /**
     * Boolean flag to set the `input` in a read-only state
     */
    readOnly?: boolean;
    /**
     * allow multiple selection
     */
    multiple?: boolean;
    /**
     * Callback function to trigger whenever the value of the `input` is changed
     */
    onChange?: (event: {
        name: string;
        value: V | V[] | null;
    }) => void;
    /**
     * The component type to use for rendering all option instances
     */
    itemComponent: (item: T) => React.ReactNode;
    /**
     * The mapping callback which will map/translate the original option object to the formatted type required by the itemComponent
     */
    itemMappingCallback: (item: V) => T;
    /**
     * The callback function which generates the display label for the selected option
     */
    optionsLabelCallback: (item: T) => string;
    /**
     * An array of SolaceSelectAutocompleteItems to render as the select options
     */
    options: Array<V>;
    /**
     * Custom renderer for selected values when we have multi-selection
     */
    renderTags?: (value: V[]) => React.ReactNode;
    /**
     * The maximum number of tags that will be visible when not focused. Set -1 to disable the limit.
     */
    limitTags?: number;
    /**
     * Fetch updated list of options
     */
    fetchOptionsCallback: (searchTerm: string) => void;
    /**
     * The callback to notify container that the select closed (can use this to clear fetched options)
     */
    onCloseCallback?: () => void;
    /**
     * Used to determine if the option represents the given value.
     */
    isOptionEqualToValueCallback?: (option: V, value: V) => boolean;
    /**
     * Used to determine the disabled state for a given option.
     */
    getOptionDisabledCallback?: (option: V) => boolean;
    /**
     * Whether there should be a divider after the option
     */
    getShowOptionDividerCallback?: (option: V) => boolean;
    /**
     * The callback function which generates group heading
     */
    groupByCallback?: (option: V) => string;
    /**
     * Whether to show divider between group headings
     */
    showGroupDivider?: boolean;
    /**
     * Custom Width of the component.
     */
    width?: string;
    /**
     * for adding a reference to the TextField component
     */
    inputRef?: (input: HTMLInputElement) => void;
    /**
     * Boolean flag to open the dropdown on focus
     */
    openOnFocus?: boolean;
    /**
     * Custom max-height of the expanded dropdown,
     * MaxHeight supports standard css units (px,rems, etc.)
     */
    maxHeight?: string;
    /**
     * Boolean flag to make the component full width
     */
    fullWidth?: boolean;
    /**
     * Custom min-width of the component
     */
    minWidth?: string;
}
declare function SolaceSelectAutocomplete<T, V>({ id, name, label, value, helperText, title, placeholder, hasErrors, required, inlineLabel, disabled, readOnly, multiple, onChange, itemComponent, itemMappingCallback, optionsLabelCallback, getShowOptionDividerCallback, groupByCallback, showGroupDivider, dataQa, dataTags, options, renderTags, limitTags, fetchOptionsCallback, onCloseCallback, isOptionEqualToValueCallback, getOptionDisabledCallback, width, inputRef, openOnFocus, maxHeight, fullWidth, minWidth }: SolaceSelectAutoCompleteProps<T, V>): JSX.Element;
export default SolaceSelectAutocomplete;
