/// <reference types="react" />
import SolaceComponentProps from "../SolaceComponentProps";
import { SELECTION_TYPE, TableColumn, TableRow, TableActionMenuItem, CustomContentDefinition } from "./table-utils";
import { SolaceMenuItemProps } from "../SolaceMenuItem";
interface TablePropType extends SolaceComponentProps {
    /**
     * Unique identifier for the button
     */
    id?: string;
    /**
     * Array of items to be displayed
     */
    rows: TableRow[];
    /**
     * Array of columns to be rendered
     */
    columns: TableColumn[];
    /**
     * Selection Type enum: NONE, SINGLE, MULTI
     */
    selectionType: SELECTION_TYPE;
    /**
     * Controlled state for rows to be selected
     */
    selectedRowIds?: string[] | null;
    /**
     * If selection type is MULTI and independentRowHighlight is true, table row highlight is handled via row click only,
     * not affected by checkbox selection, default is false
     */
    independentRowHighlight?: boolean;
    /**
     * Controlled state for a row to be highlighted
     */
    highlightedRowId?: string | null;
    /**
     * Enables columns hiding
     */
    hasColumnHiding?: boolean;
    /**
     * Controlled state for columns show and hide information
     */
    displayedColumns?: TableColumn[];
    /**
     * Function that is called when displayed columns change is requested
     */
    displayedColumnsChangedCallback?: (displayedColumns: TableColumn[]) => void;
    /**
     * Custom content definition to identify the attributes
     */
    customContentDefinitions?: CustomContentDefinition[];
    /**
     * Function that is called when custom content disply change is requested
     */
    customContentDisplayChangeCallback?: (type: string, isHidden: boolean) => void;
    /**
     * Controlled state for custom content to be displayed
     */
    displayedCustomContent?: string[];
    /**
     * Action menu items that apply to all rows
     */
    rowActionMenuItems?: TableActionMenuItem[];
    /**
     * Controlled state for sorted column.
     */
    sortedColumn?: TableColumn | undefined;
    /**
     * Sort callback when sorted column change is requested
     */
    sortCallback: (column: TableColumn | undefined) => void;
    /**
     * Empty state message
     */
    emptyStateMessage?: string;
    /**
     * Renders a custom empty state message
     */
    renderCustomEmptyState?: () => React.ReactNode;
    /**
     * Show emptyStateMessage or cunstomEmptyState when set to true
     */
    showEmptyState?: boolean;
    /**
     * Selection changed callback, applicable when selection type is SINGLE or select type is MULTI and
     * crossPageRowSelectionSupported is false.
     */
    selectionChangedCallback?: (rows: TableRow[]) => void;
    /**
     * Row highlight changed callback, applicable when selection type is MULTI and independentRowHighlight is true
     */
    rowHighlightChangedCallback?: (row: TableRow | null) => void;
    /**
     * Renders a custom row without predefined columns, such as checkbox column, expand/collapse column
     */
    renderCustomRowCells?: (row: TableRow) => JSX.Element[];
    /**
     * Renders action items for a row. If set at the same time as rowActionMenuItems, this callback takes precedence.
     */
    renderCustomRowActionItem?: (row: TableRow) => TableActionMenuItem[];
    /**
     * Header hover callback
     */
    headerHoverCallback?: () => void;
    /**
     * Row hover callback
     */
    rowHoverCallback?: (row: TableRow) => void;
    /**
     * If option is set, the table row is expandable.
     */
    expandableRowOptions?: ExpandableRowOptions;
    /**
     * loading state
     */
    loading?: boolean;
    /**
     * loading state messaging
     */
    loadingMessage?: string;
    /**
     * Max Height for Solace Table
     */
    maxHeight?: string;
    /**
     * Min Height for Solace Table
     */
    minHeight?: string;
    /**
     * Custom menu actions for Solace Table
     */
    customMenuActions?: SolaceMenuItemProps[];
    /**
     * This option is only applicable when selection type is MULTI. If set to true, selections made across different pages are remembered,
     * used in conjunction with totalObjectCount, selectedRowIds, deselectedRowIds, allPagesSelectedByDefault, and
     * crossPageSelectionChangedCallback. Default value is false.
     */
    crossPageRowSelectionSupported?: boolean;
    /**
     * Total number of objects across all pages, applicable when crossPageRowSelectionSupported is true.
     * Default value is 0.
     */
    totalObjectCount?: number;
    /**
     * This state is set to true once user checks Select All checkbox and set to false if user unchecks Select All checkbox,
     * applicable when crossPageRowSelectionSupported is true. Default value is false.
     */
    allPagesSelectedByDefault?: boolean;
    /**
     * Controlled state for rows to be deselected in all the pages that has been visited, applicable when crossPageRowSelectionSupported is true.
     * If same ID also exists in selectedRowIds, deselectedRowIds take precedence.
     */
    deselectedRowIds?: string[] | null;
    /**
     * Selection changed callback, applicable when crossPageRowSelectionSupported is true.
     */
    crossPageSelectionChangedCallback?: (selectedRowsInCurrentPage: TableRow[], allPagesSelectedByDefault: boolean, selectedRowIdsInVisitedPages: string[], deselectedRowIdsInVisitedPages: string[]) => void;
}
export interface ExpandableRowOptions {
    /**
     * Show expand/collapse icon
     */
    allowToggle: boolean;
    /**
     * Whether clicking on children will select the parent row, default is true
     */
    selectRowWhenClickOnChildren?: boolean;
    /**
     * Renders expanded content
     */
    renderChildren: (row: TableRow) => React.ReactNode;
    /**
     * Expanded row ids
     */
    expandedRowIds: string[];
    /**
     * Set expanded row ids
     */
    setExpandedRowIds: (rowIds: string[]) => void;
}
declare function SolaceTable({ id, rows, columns, selectionType, selectedRowIds, selectionChangedCallback, independentRowHighlight, highlightedRowId, rowHighlightChangedCallback, sortedColumn, sortCallback, renderCustomRowCells, emptyStateMessage, renderCustomEmptyState, showEmptyState, rowActionMenuItems, renderCustomRowActionItem, headerHoverCallback, rowHoverCallback, hasColumnHiding, displayedColumns, displayedColumnsChangedCallback, expandableRowOptions, loading, loadingMessage, customContentDefinitions, displayedCustomContent, customContentDisplayChangeCallback, maxHeight, minHeight, customMenuActions, crossPageRowSelectionSupported, totalObjectCount, allPagesSelectedByDefault, deselectedRowIds, crossPageSelectionChangedCallback }: TablePropType): JSX.Element;
export default SolaceTable;
