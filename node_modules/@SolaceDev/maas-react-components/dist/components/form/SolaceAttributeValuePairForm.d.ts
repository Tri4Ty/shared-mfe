/// <reference types="react" />
import { valueInputTypes } from "./SolaceAttributeValuePair";
export interface AVPItem {
    id?: string;
    key: string;
    value: string;
    keyErrorText?: string;
    valueErrorText?: string;
}
export interface SolaceAttributeValuePairFormProps {
    /**
     * Unique identifier, if `id` is not specified, `name` value will be used
     */
    id?: string;
    /**
     * Name attribute to assign to the AVP form
     */
    name: string;
    /**
     * read only flag
     */
    readOnly?: boolean;
    /**
     * label for the key column
     */
    labelForKeys?: string;
    /**
     * label for the value column
     */
    labelForValues?: string;
    /**
     * TODO: implementation required
     * specifies the type of the value providing component: types can be input, select etc. component, default to SolaceTextField if no type provided
     */
    type?: valueInputTypes;
    /**
     * initial AVP list of key/value pairs, it can be an empty array e.g.[]
     */
    avpList?: Array<AVPItem>;
    /**
     * callback function that returns the current AVP list
     */
    onAVPListUpdate?: (list: Array<AVPItem>) => void;
    /**
     * validate individual AVP values, the function is triggered onBlur event
     */
    avpKeyValidationCallback?: (input: string, values: Array<AVPItem>) => string;
    /**
     * validate individual AVP values, the function is triggered onBlur event
     */
    avpValueValidationCallback?: (input: string, values: Array<AVPItem>) => string;
    /**
     * Boolean flag used to display an indicator of whether or not `input` for key field is mandatory
     */
    enableRequiredKeyFieldIndicator?: boolean;
    /**
     * Boolean flag used to display an indicator of whether or not `input` for value field is mandatory
     */
    enableRequiredValueFieldIndicator?: boolean;
    /**
     * An optional string to be displayed when an AVP key or value is empty when set to read-only.
     */
    emptyFieldDisplayValue?: string;
    /**
     *
     * This boolean allows user to toggle whether keys are mandatory or not (i.e. if set to false, you can have a value without an associated key)
     */
    keyRequired?: boolean;
    /**
     * String message to display if an AVP value is specified without an associated key (unless allowedKeyToBeEmpty is true, then no validation check done)
     */
    keyIsRequiredMessage?: string;
    /**
     * Content to display as supportive/explanitory text
     */
    helperText?: string | JSX.Element;
    /**
     * Boolean flag to mark the `input` in error state
     */
    hasErrors?: boolean;
    /**
     * Boolean flag to mark the `input` in warn state
     */
    hasWarnings?: boolean;
}
declare const SolaceAttributeValuePairForm: ({ id, name, readOnly, labelForKeys, labelForValues, avpList, onAVPListUpdate, avpKeyValidationCallback, avpValueValidationCallback, enableRequiredKeyFieldIndicator, enableRequiredValueFieldIndicator, emptyFieldDisplayValue, keyRequired, keyIsRequiredMessage, helperText, hasErrors, hasWarnings }: SolaceAttributeValuePairFormProps) => JSX.Element;
export default SolaceAttributeValuePairForm;
